-- usage:
-- cat scripts/doc/src/example.template.md | lua scripts/doc/generate.lua > doc/example.md

local function is_main()
	return arg ~= nil and arg[-1] ~= nil
end

local cjson = require("cjson")
local etlua = require("etlua")

local AUTO_DISCLAIMER = [[
<!--
	autogenerated by scripts/doc/generate.lua
	from %s
-->
]]

local json ---@type unknown
do
	local doc_file = assert(io.open("./scripts/doc/out/doc.json"))
	json = cjson.decode(doc_file:read("a"))
	doc_file:close()
end

local env = { lsp_lib = {} }
for _, elem in ipairs(json) do
	local name = elem.name ---@type string
	if name:match("^lsp%-lib") then
		local t = env.lsp_lib
		local key, last_index = name:match("^%.([%w_]+)()", #"lsp-lib" + 1)
		while key do
			local new_t = t[key]
			if not new_t then
				new_t = {}
				t[key] = new_t
			end
			t = new_t
			key, last_index = name:match("^%.([%w_]+)()", last_index)
		end

		t.name = name:lower()

		-- we are at the end, generate docs for the current node
		local defines = {}
		if elem.defines then
			for _, define in ipairs(elem.defines) do
				table.insert(defines, define.desc)
			end
		end

		local desc_text = table.concat(defines, "\n---\n")
		t.desc = desc_text

		local fields = {}
		if elem.fields then
			for _, field in ipairs(elem.fields) do
				fields[field.name] = { desc = field.desc, view = field.view }
			end
		end
		t.fields = fields
	end
end

local function generate(template_path)
	local text ---@type string
	do
		local template_file = assert(io.open(template_path))
		text = template_file:read("a")
		template_file:close()
	end
	local template = etlua.compile(text)

	local content = template(env)
	local buffer = {
		string.format(AUTO_DISCLAIMER, template_path),
		content,
	}

	return table.concat(buffer)
end

return generate

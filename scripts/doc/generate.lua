-- usage:
-- cat scripts/doc/src/example.template.md | lua scripts/doc/generate.lua > doc/example.md

local cjson = require("cjson")
local etlua = require("etlua")

local AUTO_DISCLAIMER = [[
<!--
	autogenerated by scripts/doc/generate.lua
	from %s
-->
]]

local json ---@type unknown
do
	local doc_file = assert(io.open("./scripts/doc/out/doc.json"))
	json = cjson.decode(doc_file:read("a"))
	doc_file:close()
end

local env = { lsp_lib = {} }
for _, elem in ipairs(json) do
	local name = elem.name ---@type string
	if name:match("^lsp%-lib") then
		local t = env.lsp_lib
		local key, last_index = name:match("^%.([%w_]+)()", #"lsp-lib" + 1)
		while key do
			local new_t = t[key]
			if not new_t then
				new_t = {}
				t[key] = new_t
			end
			t = new_t
			key, last_index = name:match("^%.([%w_]+)()", last_index)
		end

		t.name = name:lower()

		-- we are at the end, generate docs for the current node
		local defines = {}
		if elem.defines then
			for _, define in ipairs(elem.defines) do
				table.insert(defines, define.desc)
			end
		end

		local desc_text = table.concat(defines, "\n---\n")
		t.desc = desc_text

		local fields = {}
		if elem.fields then
			for _, field in ipairs(elem.fields) do
				local args, returns = field.view:match("fun(%b())%:(%b())")
				local field_data = { desc = field.desc, name = field.name }
				if args and returns then
					field_data.view = string.format("%s -> %s", args, returns)
				elseif
					field.view == "function" and field.type == "setfield"
				then
					---@type string[]
					local args_list = {}
					if field.extends.args then
						for _, arg in ipairs(field.extends.args) do
							table.insert(
								args_list,
								string.format("%s: %s", arg.name, arg.view)
							)
						end
					end

					if field.extends.returns then
						---@type string[]
						local returns_list = {}
						for _, return_val in ipairs(field.extends.returns) do
							if
								return_val.name
								and return_val.name ~= return_val.view
							then
								table.insert(
									returns_list,
									string.format(
										"%s: %s",
										return_val.name,
										return_val.view
									)
								)
							else
								table.insert(returns_list, return_val.view)
							end
						end
						field_data.view = string.format(
							"(%s) -> (%s)",
							table.concat(args_list, ", "),
							table.concat(returns_list, ", ")
						)
					else
						field_data.view =
							string.format("(%s)", table.concat(args_list, ", "))
					end
				else
					field_data.view = string.format(": %s", field.view)
				end

				table.insert(fields, field_data)
			end
		end
		t.fields = fields
	end
end

local function generate(template_path)
	local text ---@type string
	do
		local template_file = assert(io.open(template_path))
		text = template_file:read("a")
		template_file:close()
	end
	local template = assert(etlua.compile(text))

	local content = template(env)
	local buffer = {
		string.format(AUTO_DISCLAIMER, template_path),
		content,
	}

	return table.concat(buffer)
end

return generate
